using UnityEngine;
using System;

public class camera_script : MonoBehaviour
{
    public Transform target_;
    public float offset_;
    public float offset_A;
    public float offset_B;
    public float cam_theta_XZ;
    public float cam_theta_XYZ;
    public float cam_theta_XYZ_upper;
    public float cam_theta_XYZ_lower;
    public float cam_sensitivity;
    public float cam_interruption = 100f;
    // Start is called before the first frame update
    void Start()
    {
        SetCamera();
    }

    // Update is called once per frame
    void Update()
    {
        controls_update_cam();
        occlusion_raycast();
        UpdCamera();
    }

    void SetCamera()
    {
        Vector3 pos_;
        offset_ = offset_A;
        pos_.x = target_.position.x;
        pos_.y = target_.position.y + 2;
        pos_.z = target_.position.z + offset_;
        transform.position = pos_;
    }

    void UpdCamera()
    {
        double x_;
        double z_;
        double y_;
        float dist_xz;
        y_ = offset_ * Math.Sin(cam_theta_XYZ * (Math.PI / 180));
        dist_xz = (float)(offset_ * Math.Cos(cam_theta_XYZ * (Math.PI / 180)));
        x_ = dist_xz * Math.Sin(cam_theta_XZ * (Math.PI / 180));
        z_ = dist_xz * Math.Cos(cam_theta_XZ * (Math.PI / 180));
        Vector3 cam_pos;
        cam_pos.x = (float)x_ + target_.position.x;
        cam_pos.z = (float)z_ + target_.position.z;
        cam_pos.y = (float)y_ + target_.position.y;
        transform.position = cam_pos;
        transform.LookAt(target_);
    }

    void controls_update_cam()
    {
        //FOR MOUSE INPUTS
        if (Input.GetAxis("Mouse X") != 0)
        {
            //IN DEGREES
            cam_theta_XZ = cam_theta_XZ + (Input.GetAxis("Mouse X") * cam_sensitivity);
        }
        if (Input.GetAxis("Mouse Y") != 0)
        {
            //IN DEGREES
            if (cam_theta_XYZ < cam_theta_XYZ_lower)
            {
                cam_theta_XYZ = cam_theta_XYZ_lower + 1;
            }
            if (cam_theta_XYZ > cam_theta_XYZ_upper)
            {
                cam_theta_XYZ = cam_theta_XYZ_upper - 1;
            }
            cam_theta_XYZ = cam_theta_XYZ - (Input.GetAxis("Mouse Y") * cam_sensitivity);
            /*
            if(cam_theta_XYZ < 0 && offset_ > offset_B)
            {
                Debug.Log("Angle is lower");
                offset_ = (offset_A - offset_B) * ((Math.Abs(cam_theta_XYZ_lower) - Math.Abs(cam_theta_XYZ)) / Math.Abs(cam_theta_XYZ_lower));
            }
            */
        }
        //CAMERA ADJUST IF OUT OF BOUNDS
        /*
        if (offset_ < offset_B)
        {
            offset_ = Mathf.Lerp(offset_, offset_B, Time.deltaTime * 3);
        }
        */
        if (cam_theta_XYZ < cam_theta_XYZ_lower)
        {
            cam_theta_XYZ = Mathf.Lerp(cam_theta_XYZ, cam_theta_XYZ_lower + 1, Time.deltaTime * 3);
        }
        
        if(cam_interruption > 0f)
        {
            if (offset_ > offset_B)
            {
                offset_ = Mathf.Lerp(offset_, offset_ - 3, Time.deltaTime * 3);
            }
        }
        else if(cam_interruption <= 0f)
        {
            if(offset_ < offset_A)
            {
                offset_ = Mathf.Lerp(offset_, offset_ + 3, Time.deltaTime * 3);
            }
        }
    }

    void occlusion_raycast()
    {
        Ray ray_ = new Ray(transform.position, transform.TransformDirection(Vector3.forward));
        RaycastHit hit_;
        int layerMask = 1;
        Color color_;
        float ray_distance = Vector3.Distance(transform.position, target_.transform.position);
        Debug.Log("RAY DISTANCE: " + ray_distance.ToString() + "interruption timer: " + cam_interruption.ToString("0.00"));
        color_ = Color.green;
        if (Physics.Raycast(ray_, out hit_, ray_distance, layerMask))
        {
            Debug.Log("Hit : " + hit_.collider.name + "; cam_interruption: " + cam_interruption.ToString());
            cam_interruption = 100f;
            color_ = Color.red;
        }
        else
        {
            cam_interruption = cam_interruption - 1f;
        }
        Debug.DrawRay(transform.position, transform.TransformDirection(Vector3.forward) * ray_distance, color_);
    }
    
}
